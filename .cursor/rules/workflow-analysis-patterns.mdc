---
description: 
globs: 
alwaysApply: false
---
---
description: Patterns for workflow analysis and self-improvement
globs: ["agents/improvement/**/*.py", "orchestrator/**/*.py"]
alwaysApply: false
---

# Workflow Analysis & Self-Improvement Patterns

## Workflow Tracking Pattern

```python
# Every workflow must be tracked
async def handle_request(self, message: str, context: Dict) -> str:
    # Start tracking
    run_id = str(uuid.uuid4())
    run_data = {
        "run_id": run_id,
        "start_time": datetime.utcnow(),
        "user_id": context.get("user_id"),
        "initial_message": message,
        "context": context
    }
    
    try:
        # Execute workflow
        response = await self._execute_workflow(message, context)
        
        # Track success
        run_data.update({
            "end_time": datetime.utcnow(),
            "status": "completed",
            "response": response,
            "agents_used": self._get_agents_used()
        })
        
    except Exception as e:
        # Track failure for learning
        run_data.update({
            "end_time": datetime.utcnow(),
            "status": "failed",
            "error": str(e),
            "error_type": type(e).__name__
        })
        response = await self._handle_error(e)
    
    finally:
        # Always analyze
        await self.db_logger.save_run(run_data)
        asyncio.create_task(self._analyze_run(run_id))
        
    return response
```

## Pattern Recognition

```python
class PatternRecognition:
    def __init__(self):
        self.patterns = defaultdict(PatternInfo)
        self.min_frequency = 3
        
    async def track_interaction(self, run_data: Dict):
        # Extract pattern signature
        signature = self._extract_signature(run_data)
        
        # Track frequency
        self.patterns[signature].frequency += 1
        self.patterns[signature].examples.append(run_data["run_id"])
        
        # Check for automation opportunity
        if self.patterns[signature].frequency >= self.min_frequency:
            await self._create_automation(signature)
    
    def _extract_signature(self, run_data: Dict) -> str:
        """Create pattern signature from workflow."""
        return f"{run_data['message_type']}:{run_data['agents_used']}:{run_data['success']}"
```

## Continuous Improvement Cycles

```python
class ImprovementOrchestrator:
    async def run_continuous_improvement(self):
        """Main improvement loop."""
        await asyncio.gather(
            self._run_realtime_monitoring(),    # Every minute
            self._run_hourly_improvements(),    # Every hour
            self._run_daily_deep_analysis(),    # Every day
            self._run_weekly_optimization()     # Every week
        )
    
    async def _run_hourly_improvements(self):
        while True:
            await asyncio.sleep(3600)
            
            # Analyze recent runs
            recent_runs = await self.get_recent_runs(hours=1)
            
            for run in recent_runs:
                analysis = await self.workflow_analyst.analyze(run)
                
                if analysis.has_improvement:
                    await self.apply_improvement(analysis.improvement)
```

## Learning Propagation

```python
async def propagate_learning(self, learning: Dict):
    """Spread learnings across the system."""
    
    # Find relevant agents
    relevant_agents = await self._find_relevant_agents(learning)
    
    for agent_id in relevant_agents:
        # Update agent configuration
        if agent_id in self.agent_registry:
            await self._update_agent_knowledge(agent_id, learning)
        
        # Update active agent if loaded
        if agent_id in self.active_agents:
            agent = self.active_agents[agent_id]
            await agent.apply_learning(learning)
```
